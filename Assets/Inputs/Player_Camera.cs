//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Player_Camera.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Camera : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Camera()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Camera"",
    ""maps"": [
        {
            ""name"": ""Player Camera"",
            ""id"": ""c8e78dc7-20ae-496a-aea3-b7df913aed9e"",
            ""actions"": [
                {
                    ""name"": ""Camera_Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9475983f-a8bd-45b8-aaed-0761dc8388af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap_Shoulder"",
                    ""type"": ""Button"",
                    ""id"": ""a1a1c45a-2cdd-4529-9b2f-1052a87409d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d20a3d39-2e1d-4c3d-b9f7-8af9d188de93"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Camera_Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85e31f47-00bb-43b6-ab1d-f7f86791132a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Camera_Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51ba1eff-d898-47fd-bfbb-a4231795a32e"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Swap_Shoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f977f4c4-720c-40f1-981e-c7ab992a747c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Swap_Shoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Player Camera
        m_PlayerCamera = asset.FindActionMap("Player Camera", throwIfNotFound: true);
        m_PlayerCamera_Camera_Move = m_PlayerCamera.FindAction("Camera_Move", throwIfNotFound: true);
        m_PlayerCamera_Swap_Shoulder = m_PlayerCamera.FindAction("Swap_Shoulder", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Camera
    private readonly InputActionMap m_PlayerCamera;
    private IPlayerCameraActions m_PlayerCameraActionsCallbackInterface;
    private readonly InputAction m_PlayerCamera_Camera_Move;
    private readonly InputAction m_PlayerCamera_Swap_Shoulder;
    public struct PlayerCameraActions
    {
        private @Player_Camera m_Wrapper;
        public PlayerCameraActions(@Player_Camera wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera_Move => m_Wrapper.m_PlayerCamera_Camera_Move;
        public InputAction @Swap_Shoulder => m_Wrapper.m_PlayerCamera_Swap_Shoulder;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCameraActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCameraActions instance)
        {
            if (m_Wrapper.m_PlayerCameraActionsCallbackInterface != null)
            {
                @Camera_Move.started -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnCamera_Move;
                @Camera_Move.performed -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnCamera_Move;
                @Camera_Move.canceled -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnCamera_Move;
                @Swap_Shoulder.started -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnSwap_Shoulder;
                @Swap_Shoulder.performed -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnSwap_Shoulder;
                @Swap_Shoulder.canceled -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnSwap_Shoulder;
            }
            m_Wrapper.m_PlayerCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Camera_Move.started += instance.OnCamera_Move;
                @Camera_Move.performed += instance.OnCamera_Move;
                @Camera_Move.canceled += instance.OnCamera_Move;
                @Swap_Shoulder.started += instance.OnSwap_Shoulder;
                @Swap_Shoulder.performed += instance.OnSwap_Shoulder;
                @Swap_Shoulder.canceled += instance.OnSwap_Shoulder;
            }
        }
    }
    public PlayerCameraActions @PlayerCamera => new PlayerCameraActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerCameraActions
    {
        void OnCamera_Move(InputAction.CallbackContext context);
        void OnSwap_Shoulder(InputAction.CallbackContext context);
    }
}
